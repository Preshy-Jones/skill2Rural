generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                Int              @id @default(autoincrement())
  name                              String?
  email                             String           @unique
  password                          String?
  type                              Type             @default(STUDENT)
  organisation                      String?
  role                              String?
  no_of_students_to_reach           Int?
  work_with_maginalized_populations Boolean?
  createdAt                         DateTime         @default(now())
  updatedAt                         DateTime         @updatedAt
  CourseProgress                    CourseProgress[]
  CourseReview                      CourseReview[]
}

model Educator {
  id                                Int      @id @default(autoincrement())
  name                              String?
  email                             String   @unique
  password                          String?
  organisation                      String?
  role                              String?
  no_of_students_to_reach           Int?
  work_with_maginalized_populations Boolean?
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
}

enum Type {
  STUDENT
  EDUCATOR
}

model Course {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  thumbnail_image String
  video_url   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  reviews     CourseReview[]
  progress    CourseProgress[]
}

model CourseProgress {
  id        Int      @id @default(autoincrement())
  progress  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model CourseReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model AccountRecovery {
  id        Int      @id @default(autoincrement())
  userId    Int
  email     String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}